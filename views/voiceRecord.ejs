
<div class="col-lg-6 mb-4">

<!-- Illustrations -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">녹음</h6>
    </div>
    <div class="card-body">
        <form action="/voice/recordInsert" name="voice_content" method="GET">
            <table>
            <input type="text" id="account_id" hidden/>        
            <tr><td>작성자</td>   <td><input disable type="text" name="account_id" value="1760576225"/><%=data[0].account_id %></td></tr>
            <tr><td>작성일시</td> <td><input type="text" name="reporting_date" value="2021-06-09"/> </td></tr>
            <tr><td>제목</td>     <td><input type="text" name="title" value="test" /></td></tr>
            <tr><td>내용</td>     <td><input type="text" name="content" value="test" /></td></tr>
            <tr><td>음성파일</td> <td>
                <input type="checkbox" id="chk-hear-mic"><label for="chk-hear-mic">마이크 소리 듣기</label>
            <button type="button" id="record">녹음</button>
            <button type="button" id="stop">정지</button>
                <div id="sound-clips"></div></td></tr>
            <div id="sound-clips"></div>
            </table>
            <button type="submit">제출</button>
        </form>
        
        <br/>
        <br/>
        <br/>
        <br/>

    </div>
</div>

<script>
    const record = document.getElementById("record")
    const stop = document.getElementById("stop")
    const soundClips = document.getElementById("sound-clips")
    const chkHearMic = document.getElementById("chk-hear-mic")

    const audioCtx = new(window.AudioContext || window.webkitAudioContext)() // 오디오 컨텍스트 정의

    const analyser = audioCtx.createAnalyser()
    //        const distortion = audioCtx.createWaveShaper()
    //        const gainNode = audioCtx.createGain()
    //        const biquadFilter = audioCtx.createBiquadFilter()

    function makeSound(stream) {
        const source = audioCtx.createMediaStreamSource(stream)

        source.connect(analyser)
        //            analyser.connect(distortion)
        //            distortion.connect(biquadFilter)
        //            biquadFilter.connect(gainNode)
        //            gainNode.connect(audioCtx.destination) // connecting the different audio graph nodes together
        analyser.connect(audioCtx.destination)

    }

    if (navigator.mediaDevices) {
        console.log('getUserMedia supported.')

        const constraints = {
            audio: true
        }
        let chunks = []

        navigator.mediaDevices.getUserMedia(constraints)
            .then(stream => {
                //MediaRecorder API 사용
                const mediaRecorder = new MediaRecorder(stream)
                
                chkHearMic.onchange = e => {
                    if(e.target.checked == true) {
                        audioCtx.resume()
                        makeSound(stream)
                    } else {
                        audioCtx.suspend()
                    }
                }
                
                record.onclick = () => {
                    
                    if(document.getElementsByTagName('article').length !=0) {
                        alert("녹음된 목소리가 존재합니다. 다시 녹음하고싶으신 경우 기존의 녹음된 파일을 삭제하여 주십시오.")
                        return
                    }
                    mediaRecorder.start()
                    console.log(mediaRecorder.state)
                    console.log("recorder started")
                    record.style.background = "red"
                    record.style.color = "black"
                }

                stop.onclick = () => {
                    mediaRecorder.stop()
                    console.log(mediaRecorder.state)
                    console.log("recorder stopped")
                    record.style.background = ""
                    record.style.color = ""
                }

                mediaRecorder.onstop = e => {
                    console.log("data available after MediaRecorder.stop() called.")

                    const clipContainer = document.createElement('article')
                    const clipLabel = document.createElement('p')
                    const audio = document.createElement('audio')
                    const deleteButton = document.createElement('button')
                    const blobData= document.createElement('input')

                    clipContainer.classList.add('clip')
                    audio.setAttribute('controls', '')
                    deleteButton.innerHTML = "삭제"

                    clipContainer.appendChild(audio)
                    clipContainer.appendChild(blobData)
                    clipContainer.appendChild(clipLabel)
                    clipContainer.appendChild(deleteButton)
                    blobData.type='text'
                    blobData.name='voice'
                    
                    soundClips.appendChild(clipContainer)

                    audio.controls = true
                    const blob = new Blob(chunks, {
                        'type': 'audio/ogg codecs=opus'
                    })
                    const formData = new FormData()
                    var formBlobData = new FormData();
                    formBlobData.append("voice", blob, "voice");

                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', "/recordInsert" , true);
                    xhr.send(formBlobData);

                    chunks = []
                    const audioURL = URL.createObjectURL(blob)
                    audio.src = audioURL
                    console.log(blob)
                    console.log("blob size")
                    console.log(blob.size)
                    console.log("blob type")
                    console.log(blob.type)
                    console.log("recorder stopped")

                    deleteButton.onclick = e => {
                        evtTgt = e.target
                        evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode)
                    }
                }

                mediaRecorder.ondataavailable = e => {
                    chunks.push(e.data)
                }
            })
            .catch(err => {
                console.log('The following error occurred: ' + err)
            })
    }
</script>
